name: ETL CI/CD

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ci:
    name: CI - Lint, Terraform Check, and Plan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -input=false -out=tfplan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: terraform/tfplan

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install Dependencies
        run: poetry install

      - name: Python Lint
        run: poetry run flake8 .

  cd:
    name: CD - Deploy Infra and DAGs
    needs: ci
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: terraform/

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -input=false -auto-approve tfplan

      - name: Get Composer Bucket Name
        id: get-bucket
        run: |
          cd terraform
          BUCKET_NAME=$(terraform output -json | jq -r '.composer_bucket_name.value')
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "Using bucket: gs://${BUCKET_NAME}"

      - name: Verify Bucket Name
        run: |
          if [ -z "${{ steps.get-bucket.outputs.bucket_name }}" ]; then
            echo "::error::Bucket name is empty"
            terraform output -json
            exit 1
          fi

      - name: Deploy DAGs to Composer
        run: |
          gcloud storage rsync --delete -r dags/ gs://${{ steps.get-bucket.outputs.bucket_name }}/dags/

      - name: Deploy Plugins to Composer
        run: |
          gcloud storage rsync --delete -r plugins/ gs://${{ steps.get-bucket.outputs.bucket_name }}/plugins/

      - name: Deploy Data to Composer
        run: |
          gcloud storage rsync --delete -r data/ gs://${{ steps.get-bucket.outputs.bucket_name }}/data/